/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./static/js/index.js":
/*!****************************!*\
  !*** ./static/js/index.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _style_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style.css */ \"./static/js/style.css\");\n/* harmony import */ var _style_css__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_css__WEBPACK_IMPORTED_MODULE_0__);\n\nwindow.Dropzone = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module './static/js/dropzone'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\nconst messageError = document.querySelector(\".message\");\nconst messageText = document.querySelector(\".message__text\");\nconst closeMessage = document.querySelector(\".close\");\nconst spinnerLoader = document.querySelector(\"#spinner\");\nconst modalLoader = document.querySelector(\".modal\");\nconst mainWrapper = document.querySelector(\".main-wrapper\");\nconst slideContainer = document.querySelector(\".slideshow-container\");\nconst exitBtn = document.querySelector(\".remove-button\");\nexitBtn.addEventListener(\"click\", exitSlider);\ncloseMessage.addEventListener(\"click\", closeAlert); // message error if the button ok is pressed the box disappear\n\nfunction closeAlert() {\n  messageError.style.display = \"none\";\n}\n/*DROPZONE CUSTOMIZE CONFIGURATION*/\n\n\nDropzone.options.myawesomedropzone = {\n  init: function () {\n    this.on('addedfile', function (file) {\n      // if the files are more than 10 an error message appear and the 10^ element will be removed\n      if (this.files.length > 10) {\n        this.removeFile(this.files[10]);\n        messageError.style.display = \"inline-block\";\n        messageText.innerHTML = \"no more than 10\";\n      } else {\n        messageError.style.display = \"none\";\n      }\n    });\n    this.on('removedfile', function (file) {\n      // if the button remove file (under the image) is pressed and the files are less than 10, the box error disappear\n      if (this.files.length < 10) {\n        messageError.style.display = \"none\";\n      } else {\n        messageError.style.display = \"inline-block\";\n      }\n    });\n    /* \"this\" is a reference to myDropzone. I add to call it outside the button funtion below because otherwise\n    it gives me a different value linked with the button\n    */\n\n    let myDropzone = this;\n    document.querySelector(\"#button\").addEventListener(\"click\", function (e) {\n      //spinnerLoader.style.visibility = \"visible\";  \n      //modalLoader.style.display =\"block\";\n\n      /* if there are more than 0 slides already in the slider (maybe because i uploaded images before)\n      it will remove them*/\n      if (document.querySelectorAll(\".slides-image-container\").length > 0) {\n        document.querySelectorAll(\".slides-image-container\").forEach(function (element) {\n          element.parentNode.removeChild(element);\n        });\n      }\n\n      ;\n      /* here i take the files property of the object mydropzone and a pass the dataURL that is a reference to the image.\n       i need that because the tag img needed it in the src*/\n\n      myDropzone.files.forEach(function (element, i) {\n        createSlide(element.dataURL, i);\n      }); // here I removed all the files from the dropzone when upload is clicked\n\n      myDropzone.removeAllFiles();\n      mainWrapper.style.display = \"block\"; // document.querySelector(\".slides-image-container\").innerHTML = \"\";\n\n      /* e.preventDefault();\n       myDropzone.processQueue();    \n       */\n    });\n  }\n};\n/* Here I create the slides that composed the slideshow, i assigned the dataURL to the src,\nbased on the slider built by Manuel I give to the first slide the display block (index 0)*/\n\nfunction createSlide(imageSrc, index) {\n  const slides = document.createElement(\"div\");\n  slides.classList.add(\"slides-image-container\");\n\n  if (index == 0) {\n    slides.style.display = \"block\";\n  }\n\n  const image = new Image();\n  const result = document.createElement(\"div\");\n  result.classList.add(\"result-wrapper\");\n  image.classList.add(\"image\");\n  image.src = imageSrc;\n  slides.appendChild(image);\n  slides.appendChild(result);\n  slides.children[0].style.display = \"block\";\n  slideContainer.appendChild(slides);\n} // button to exit from the slider when the modal appear\n\n\nfunction exitSlider() {\n  mainWrapper.style.display = \"none\";\n} // When the user clicks anywhere outside of the modal, close it\n\n\nwindow.onclick = function (event) {\n  if (event.target == mainWrapper) {\n    mainWrapper.style.display = \"none\";\n  }\n};\n/* Default slide index is 1 */\n\n\nvar slideIndex = 1;\nvar slides = document.getElementsByClassName(\"slides-image-container\");\nshowSlides(slideIndex);\nconst prevButton = document.querySelector(\".prev\");\nconst nextButton = document.querySelector(\".next\");\n/* Callback for previous button */\n\nprevButton.addEventListener(\"click\", function () {\n  plusSlides(-1);\n});\n/* Callback for next button */\n\nnextButton.addEventListener(\"click\", function () {\n  plusSlides(1);\n});\n/* Next / previous controls */\n\nfunction plusSlides(n) {\n  console.log(\"Slider buttons are working correctly\");\n  /* Increase slide index when you press the button next and decrease it when you press the button previous */\n\n  showSlides(slideIndex += n);\n}\n/* Thumbnail image controls \n function currentSlide(n) {\n   showSlides(slideIndex = n);\n}*/\n\n\nfunction showSlides(n) {\n  var arr = Array.from(slides);\n  console.log(arr);\n  console.log(slides);\n  var i;\n\n  if (slides.length > 0) {\n    if (n > slides.length) {\n      slideIndex = 1;\n    }\n\n    if (n < 1) {\n      slideIndex = slides.length;\n    }\n    /* Display none applied to the slide if it is not the one displayed on the screen*/\n\n\n    for (i = 0; i < slides.length; i++) {\n      slides[i].style.display = \"none\";\n    }\n    /* Display the slide using display block if it is the one we're seeing on the screen */\n\n\n    console.log(slides);\n    slides[slideIndex - 1].style.display = \"block\";\n  }\n}\n/*Take a photo function */\n\n\n(function () {\n  if (!\"mediaDevices\" in navigator || !\"getUserMedia\" in navigator.mediaDevices) {\n    alert(\"Camera API is not available in your browser\");\n    return;\n  } // get page elements\n\n\n  const video = document.querySelector(\".video__mobile\");\n  const btnPlay = document.querySelector(\".btn__Play\");\n  const btnPause = document.querySelector(\".btn__Pause\");\n  const btnScreenshot = document.querySelector(\".btn__Screenshot\");\n  const btnChangeCamera = document.querySelector(\".btn__ChangeCamera\");\n  const screenshotsContainer = document.querySelector(\".container__screenshots\");\n  const canvas = document.querySelector(\".container__canvas\"); //const devicesSelect = document.querySelector(\".devicesSelect\");\n\n  var removeClass = document.querySelector(\".btn__circle\"); //btn visible \n\n  removeClass.addEventListener(\"click\", function () {\n    var element = document.getElementByClassName(\"section\");\n    element.classList.remove(\"section-visible\");\n  }); // video constraints\n\n  const constraints = {\n    video: {\n      width: {\n        min: 1280,\n        ideal: 1920,\n        max: 2560\n      },\n      height: {\n        min: 720,\n        ideal: 1080,\n        max: 1440\n      }\n    }\n  }; // use front face camera\n\n  let useFrontCamera = true; // current video stream\n\n  let videoStream; // handle events\n  // play\n\n  btnPlay.addEventListener(\"click\", function () {\n    video.play();\n    btnPlay.classList.add(\"is-hidden\");\n    btnPause.classList.remove(\"is-hidden\");\n  }); // pause\n\n  btnPause.addEventListener(\"click\", function () {\n    video.pause();\n    btnPause.classList.add(\"is-hidden\");\n    btnPlay.classList.remove(\"is-hidden\");\n  }); // take screenshot\n\n  btnScreenshot.addEventListener(\"click\", function () {\n    const img = document.createElement(\"img\");\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    canvas.getContext(\"2d\").drawImage(video, 0, 0);\n    img.src = canvas.toDataURL(\"image/png\");\n    screenshotsContainer.prepend(img);\n  }); // switch camera\n\n  btnChangeCamera.addEventListener(\"click\", function () {\n    useFrontCamera = !useFrontCamera;\n    initializeCamera();\n  }); // stop video stream\n\n  function stopVideoStream() {\n    if (videoStream) {\n      videoStream.getTracks().forEach(track => {\n        track.stop();\n      });\n    }\n  } // initialize\n\n\n  async function initializeCamera() {\n    stopVideoStream();\n    constraints.video.facingMode = useFrontCamera ? \"user\" : \"environment\";\n\n    try {\n      videoStream = await navigator.mediaDevices.getUserMedia(constraints);\n      video.srcObject = videoStream;\n    } catch (err) {\n      alert(\"Could not access the camera\");\n    }\n  }\n\n  initializeCamera();\n})();\n/* Images Upload Functions (From Desktop) \n*///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./static/js/index.js\n");

/***/ }),

/***/ "./static/js/style.css":
/*!*****************************!*\
  !*** ./static/js/style.css ***!
  \*****************************/
/***/ (() => {

throw new Error("Module parse failed: Unexpected character '@' (1:0)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n> @font-face {\n|   font-family: \"Lato\";\n|   font-style: normal;");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => module['default'] :
/******/ 				() => module;
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./static/js/index.js");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;